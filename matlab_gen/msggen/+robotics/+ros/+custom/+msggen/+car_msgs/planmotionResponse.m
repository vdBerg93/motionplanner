classdef planmotionResponse < robotics.ros.Message
    %planmotionResponse MATLAB implementation of car_msgs/planmotionResponse
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'car_msgs/planmotionResponse' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'd0425e9eba232ebb807d608002cad101' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        CarMsgsReferenceClass = robotics.ros.msg.internal.MessageFactory.getClassForType('car_msgs/Reference') % Dispatch to MATLAB class for message type car_msgs/Reference
        CarMsgsTrajectoryClass = robotics.ros.msg.internal.MessageFactory.getClassForType('car_msgs/Trajectory') % Dispatch to MATLAB class for message type car_msgs/Trajectory
    end
    
    properties (Dependent)
        Ref
        Tra
    end
    
    properties (Access = protected)
        Cache = struct('Ref', [], 'Tra', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Ref', 'Tra'} % List of non-constant message properties
        ROSPropertyList = {'ref', 'tra'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = planmotionResponse(msg)
            %planmotionResponse Construct the message object planmotionResponse
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function ref = get.Ref(obj)
            %get.Ref Get the value for property Ref
            if isempty(obj.Cache.Ref)
                javaArray = obj.JavaMessage.getRef;
                array = obj.readJavaArray(javaArray, obj.CarMsgsReferenceClass);
                obj.Cache.Ref = feval(obj.CarMsgsReferenceClass, array);
            end
            ref = obj.Cache.Ref;
        end
        
        function set.Ref(obj, ref)
            %set.Ref Set the value for property Ref
            if ~isvector(ref) && isempty(ref)
                % Allow empty [] input
                ref = feval([obj.CarMsgsReferenceClass '.empty'], 0, 1);
            end
            
            validateattributes(ref, {obj.CarMsgsReferenceClass}, {'vector'}, 'planmotionResponse', 'Ref');
            
            javaArray = obj.JavaMessage.getRef;
            array = obj.writeJavaArray(ref, javaArray, obj.CarMsgsReferenceClass);
            obj.JavaMessage.setRef(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Ref)
                obj.Cache.Ref = [];
                obj.Cache.Ref = obj.Ref;
            end
        end
        
        function tra = get.Tra(obj)
            %get.Tra Get the value for property Tra
            if isempty(obj.Cache.Tra)
                javaArray = obj.JavaMessage.getTra;
                array = obj.readJavaArray(javaArray, obj.CarMsgsTrajectoryClass);
                obj.Cache.Tra = feval(obj.CarMsgsTrajectoryClass, array);
            end
            tra = obj.Cache.Tra;
        end
        
        function set.Tra(obj, tra)
            %set.Tra Set the value for property Tra
            if ~isvector(tra) && isempty(tra)
                % Allow empty [] input
                tra = feval([obj.CarMsgsTrajectoryClass '.empty'], 0, 1);
            end
            
            validateattributes(tra, {obj.CarMsgsTrajectoryClass}, {'vector'}, 'planmotionResponse', 'Tra');
            
            javaArray = obj.JavaMessage.getTra;
            array = obj.writeJavaArray(tra, javaArray, obj.CarMsgsTrajectoryClass);
            obj.JavaMessage.setTra(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Tra)
                obj.Cache.Tra = [];
                obj.Cache.Tra = obj.Tra;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Ref = [];
            obj.Cache.Tra = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.Ref = copy(obj.Ref);
            cpObj.Tra = copy(obj.Tra);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            RefCell = arrayfun(@(x) feval([obj.CarMsgsReferenceClass '.loadobj'], x), strObj.Ref, 'UniformOutput', false);
            obj.Ref = vertcat(RefCell{:});
            TraCell = arrayfun(@(x) feval([obj.CarMsgsTrajectoryClass '.loadobj'], x), strObj.Tra, 'UniformOutput', false);
            obj.Tra = vertcat(TraCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Ref = arrayfun(@(x) saveobj(x), obj.Ref);
            strObj.Tra = arrayfun(@(x) saveobj(x), obj.Tra);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.car_msgs.planmotionResponse.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.car_msgs.planmotionResponse;
            obj.reload(strObj);
        end
    end
end
