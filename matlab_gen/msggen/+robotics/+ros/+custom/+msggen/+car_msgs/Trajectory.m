classdef Trajectory < robotics.ros.Message
    %Trajectory MATLAB implementation of car_msgs/Trajectory
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'car_msgs/Trajectory' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '01bb516666fc624cc0f7563c06716a44' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        X
        Y
        D
        Th
        V
    end
    
    properties (Constant, Hidden)
        PropertyList = {'D', 'Th', 'V', 'X', 'Y'} % List of non-constant message properties
        ROSPropertyList = {'d', 'th', 'v', 'x', 'y'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Trajectory(msg)
            %Trajectory Construct the message object Trajectory
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            javaArray = obj.JavaMessage.getX;
            array = obj.readJavaArray(javaArray, 'double');
            x = double(array);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            if ~isvector(x) && isempty(x)
                % Allow empty [] input
                x = double.empty(0,1);
            end
            
            validateattributes(x, {'numeric'}, {'vector'}, 'Trajectory', 'X');
            
            javaArray = obj.JavaMessage.getX;
            array = obj.writeJavaArray(x, javaArray, 'double');
            obj.JavaMessage.setX(array);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            javaArray = obj.JavaMessage.getY;
            array = obj.readJavaArray(javaArray, 'double');
            y = double(array);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            if ~isvector(y) && isempty(y)
                % Allow empty [] input
                y = double.empty(0,1);
            end
            
            validateattributes(y, {'numeric'}, {'vector'}, 'Trajectory', 'Y');
            
            javaArray = obj.JavaMessage.getY;
            array = obj.writeJavaArray(y, javaArray, 'double');
            obj.JavaMessage.setY(array);
        end
        
        function d = get.D(obj)
            %get.D Get the value for property D
            javaArray = obj.JavaMessage.getD;
            array = obj.readJavaArray(javaArray, 'double');
            d = double(array);
        end
        
        function set.D(obj, d)
            %set.D Set the value for property D
            if ~isvector(d) && isempty(d)
                % Allow empty [] input
                d = double.empty(0,1);
            end
            
            validateattributes(d, {'numeric'}, {'vector'}, 'Trajectory', 'D');
            
            javaArray = obj.JavaMessage.getD;
            array = obj.writeJavaArray(d, javaArray, 'double');
            obj.JavaMessage.setD(array);
        end
        
        function th = get.Th(obj)
            %get.Th Get the value for property Th
            javaArray = obj.JavaMessage.getTh;
            array = obj.readJavaArray(javaArray, 'double');
            th = double(array);
        end
        
        function set.Th(obj, th)
            %set.Th Set the value for property Th
            if ~isvector(th) && isempty(th)
                % Allow empty [] input
                th = double.empty(0,1);
            end
            
            validateattributes(th, {'numeric'}, {'vector'}, 'Trajectory', 'Th');
            
            javaArray = obj.JavaMessage.getTh;
            array = obj.writeJavaArray(th, javaArray, 'double');
            obj.JavaMessage.setTh(array);
        end
        
        function v = get.V(obj)
            %get.V Get the value for property V
            javaArray = obj.JavaMessage.getV;
            array = obj.readJavaArray(javaArray, 'double');
            v = double(array);
        end
        
        function set.V(obj, v)
            %set.V Set the value for property V
            if ~isvector(v) && isempty(v)
                % Allow empty [] input
                v = double.empty(0,1);
            end
            
            validateattributes(v, {'numeric'}, {'vector'}, 'Trajectory', 'V');
            
            javaArray = obj.JavaMessage.getV;
            array = obj.writeJavaArray(v, javaArray, 'double');
            obj.JavaMessage.setV(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.D = obj.D;
            cpObj.Th = obj.Th;
            cpObj.V = obj.V;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.D = strObj.D;
            obj.Th = strObj.Th;
            obj.V = strObj.V;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.D = obj.D;
            strObj.Th = obj.Th;
            strObj.V = obj.V;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.car_msgs.Trajectory.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.car_msgs.Trajectory;
            obj.reload(strObj);
        end
    end
end
