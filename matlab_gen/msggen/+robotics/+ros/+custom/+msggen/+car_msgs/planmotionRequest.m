classdef planmotionRequest < robotics.ros.Message
    %planmotionRequest MATLAB implementation of car_msgs/planmotionRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'car_msgs/planmotionRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '02ccd18543dfd39e0da2690227bb514b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Vmax
        Bend
        State
        Goal
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Bend', 'Goal', 'State', 'Vmax'} % List of non-constant message properties
        ROSPropertyList = {'bend', 'goal', 'state', 'vmax'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = planmotionRequest(msg)
            %planmotionRequest Construct the message object planmotionRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function vmax = get.Vmax(obj)
            %get.Vmax Get the value for property Vmax
            vmax = double(obj.JavaMessage.getVmax);
        end
        
        function set.Vmax(obj, vmax)
            %set.Vmax Set the value for property Vmax
            validateattributes(vmax, {'numeric'}, {'nonempty', 'scalar'}, 'planmotionRequest', 'Vmax');
            
            obj.JavaMessage.setVmax(vmax);
        end
        
        function bend = get.Bend(obj)
            %get.Bend Get the value for property Bend
            bend = logical(obj.JavaMessage.getBend);
        end
        
        function set.Bend(obj, bend)
            %set.Bend Set the value for property Bend
            validateattributes(bend, {'logical', 'numeric'}, {'nonempty', 'scalar'}, 'planmotionRequest', 'Bend');
            
            obj.JavaMessage.setBend(bend);
        end
        
        function state = get.State(obj)
            %get.State Get the value for property State
            javaArray = obj.JavaMessage.getState;
            array = obj.readJavaArray(javaArray, 'double');
            state = double(array);
        end
        
        function set.State(obj, state)
            %set.State Set the value for property State
            if ~isvector(state) && isempty(state)
                % Allow empty [] input
                state = double.empty(0,1);
            end
            
            validateattributes(state, {'numeric'}, {'vector'}, 'planmotionRequest', 'State');
            
            javaArray = obj.JavaMessage.getState;
            array = obj.writeJavaArray(state, javaArray, 'double');
            obj.JavaMessage.setState(array);
        end
        
        function goal = get.Goal(obj)
            %get.Goal Get the value for property Goal
            javaArray = obj.JavaMessage.getGoal;
            array = obj.readJavaArray(javaArray, 'double');
            goal = double(array);
        end
        
        function set.Goal(obj, goal)
            %set.Goal Set the value for property Goal
            if ~isvector(goal) && isempty(goal)
                % Allow empty [] input
                goal = double.empty(0,1);
            end
            
            validateattributes(goal, {'numeric'}, {'vector'}, 'planmotionRequest', 'Goal');
            
            javaArray = obj.JavaMessage.getGoal;
            array = obj.writeJavaArray(goal, javaArray, 'double');
            obj.JavaMessage.setGoal(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Vmax = obj.Vmax;
            cpObj.Bend = obj.Bend;
            cpObj.State = obj.State;
            cpObj.Goal = obj.Goal;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Vmax = strObj.Vmax;
            obj.Bend = strObj.Bend;
            obj.State = strObj.State;
            obj.Goal = strObj.Goal;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Vmax = obj.Vmax;
            strObj.Bend = obj.Bend;
            strObj.State = obj.State;
            strObj.Goal = obj.Goal;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.car_msgs.planmotionRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.car_msgs.planmotionRequest;
            obj.reload(strObj);
        end
    end
end
